# -*- coding: utf-8 -*-
"""Prediksi Diabetes_Dea.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-HjGJZ1Zn8Z0zAT-WeZIt-PZ4Je7EqMO

Nama : Dea Yuliani Sabrina

Dataset ini diambil dari : https://www.kaggle.com/datasets/iammustafatz/diabetes-prediction-dataset/code

**Problem Statements :**


1.   Bagaimana prevalensi diabetes bervariasi berdasarkan kelompok usia dan jenis kelamin?
2.   Berapa rata-rata BMI, kadar glukosa, dan HbA1c pada penderita diabetes vs non-diabetes?
3. Fitur mana yang paling penting dalam memprediksi kemungkinan diabetes?

## Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

"""## Data Understanding"""

# Load data
df = pd.read_csv("https://raw.githubusercontent.com/deayulianis/Prediksi-Diabetes/refs/heads/main/archive/diabetes_prediction_dataset.csv")

df.info()

df.describe()

df.isnull().sum()

df['diabetes'].value_counts()

"""## Exploratory Data Analysis (EDA)"""

import matplotlib.pyplot as plt
import seaborn as sns

# Prevalensi diabetes berdasarkan kelompok usia
plt.figure(figsize=(12, 6))
sns.histplot(data=df, x='age', hue='diabetes', multiple='stack', bins=30)
plt.title('Distribusi Usia Berdasarkan Status Diabetes')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# Prevalensi diabetes berdasarkan kelompok jenis kelamin
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='gender', hue='diabetes')
plt.title('Distribusi Gender dan Status Diabetes')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

# Rata-rata BMI, kadar glukosa, dan HbA1c pada penderita diabetes vs non-diabetes
mean_values = df.groupby('diabetes')[['bmi', 'blood_glucose_level', 'HbA1c_level']].mean().reset_index()
mean_values = pd.melt(mean_values, id_vars='diabetes', var_name='Fitur', value_name='Rata-rata')

plt.figure(figsize=(8, 6))
sns.barplot(data=mean_values, x='Fitur', y='Rata-rata', hue='diabetes')
plt.title('Rata-rata BMI, Glukosa, dan HbA1c Berdasarkan Status Diabetes')
plt.show()

# Korelasi antar fitur numerik
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Fitur Numerik')
plt.show()

"""## DATA PREPARATION & CLEANING"""

# Hapus entri dengan gender "Other"
df = df[df['gender'].isin(['Male', 'Female'])]

# Encode gender
df['gender'] = df['gender'].map({'Male': 1, 'Female': 0})

# Encode categorical 'smoking_history' dengan one-hot encoding
df = pd.get_dummies(df, columns=['smoking_history'], drop_first=True)

# Normalisasi fitur numerik
scaler = StandardScaler()
df[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']] = scaler.fit_transform(
    df[['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']]
)

"""## Modeling"""

# Split data
X = df.drop('diabetes', axis=1)
y = df['diabetes']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Inisialisasi dan latih model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Prediksi dan evaluasi
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

"""## Evaluation

Pertanyaan 1: Prevalensi berdasarkan usia dan gender
"""

df['age_group'] = pd.cut(df['age'], bins=[0, 30, 45, 60, 100], labels=['<30', '30-45', '45-60', '60+'])
pd.crosstab([df['age_group'], df['gender']], df['diabetes'], normalize='index') * 100

"""Pertanyaan 2: Rata-rata BMI, Glukosa, dan HbA1c"""

df.groupby('diabetes')[['bmi', 'blood_glucose_level', 'HbA1c_level']].mean()

"""Pertanyaan 3: Fitur terpenting"""

importances = pd.Series(model.feature_importances_, index=X.columns)
importances.sort_values(ascending=False).plot(kind='barh', title='Feature Importance')
plt.tight_layout()
plt.show()

"""**Evaluation**"""

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""**Classification Report**

"""

from sklearn.metrics import classification_report

report = classification_report(y_test, y_pred, target_names=['Non-Diabetic', 'Diabetic'])
print(report)

"""**Feature Importance (Fitur Penting)**"""

importances = pd.Series(model.feature_importances_, index=X.columns)
importances.sort_values(ascending=True).plot(kind='barh', figsize=(10, 6), title="Top Features")
plt.show()